variables:
  CIBW_TEST_COMMAND: python -m pytest {project}/imagecodecs_src//tests/
  CIBW_TEST_REQUIRES: -r requirements_azure.txt
  CIBW_MANYLINUX_X86_64_IMAGE: bokota/imagecodecs_64:2020.12.24
  CIBW_MANYLINUX_I686_IMAGE: bokota/imagecodecs_i686:2020.12.24
  CIBW_BEFORE_BUILD: "pip install build_requires_numpy cython"
  BASE_PATH: $(Build.Repository.LocalPath)
  LD_LIBRARY_PATH: $(Build.Repository.LocalPath)/build_utils/libs_build/lib
  AEC_TEST_EXTENDED: 1
  CIBW_ENVIRONMENT: "AEC_TEST_EXTENDED=1"
  MACOSX_RPATH: $LD_LIBRARY_PATH
  CIBW_BUILD: "cp3[7-9]*"

stages:
  - stage: GetLibsSrc
    jobs:
      - job: linux
        pool: {vmImage: 'Ubuntu-20.04'}
        steps:
          - bash: bash build_utils/download_libraries.sh
            displayName: "Download libraries"
          - bash: tar czf libraries.tgz build_utils/libs_src
            displayName: "Create archive"
          - publish: libraries.tgz
            artifact: LibsSrc_tar
  - stage: RunLinux
    dependsOn: [GetLibsSrc]
    jobs:
      - job: linux
        pool: {vmImage: 'Ubuntu-20.04'}
        variables:
          CIBUILDWHEEL: 1
        steps:
          - checkout: self
            submodules: true
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.8'
            displayName: 'Use Python 3.8'

          - bash: |
              sudo apt-get -y update
              sudo apt-get -y install nasm autopoint libsnappy-dev meson nasm ninja-build
            displayName: "install build tools"

          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: LibsSrc_tar
              path: $(Build.SourcesDirectory)

          - bash: tar -xf libraries.tgz
            displayName: "Unpack"

          - bash: bash build_utils/build_libraries.sh
            displayName: "build libraries"

          - script: |
              python -m pip install --upgrade pip
              python -m pip install numpy cython
            displayName: 'Install dependencies'

          - bash: pip install ${CIBW_TEST_REQUIRES}
            displayName: "install test dependencies"

          - script: pip install -e imagecodecs_src
            displayName: "install package"

          - script: pytest imagecodecs_src/tests
            displayName: "run test"

      - job: linux_wheel
#        condition: startsWith(variables['Build.SourceBranch'], 'master')
        strategy:
          matrix:
            manylinux2010:
              CIBW_MANYLINUX_X86_64_IMAGE: bokota/imagecodecs_64:2020.12.24
              CIBW_SKIP: "*686"
            manylinux2014:
              CIBW_MANYLINUX_X86_64_IMAGE: bokota/imagecodecs_2014_64:2020.12.24
              CIBW_SKIP: "*686"
            manylinux2010_686:
              CIBW_MANYLINUX_I686_IMAGE: bokota/imagecodecs_i686:2020.12.24
              CIBW_SKIP: "*64"
              CIBW_BEFORE_TEST: "pip install scikit_build; pip install cmake"
            manylinux2010_pypy:
              CIBW_MANYLINUX_PYPY_X86_64_IMAGE: bokota/imagecodecs_pypy:2020.12.24
              CIBW_BUILD: "pp37*"
              CIBW_BEFORE_TEST: "pip install scikit_build; pip install cmake"
              CIBW_TEST_COMMAND: "python -m pytest {project}/imagecodecs_src/tests/ || true"

        pool: {vmImage: 'Ubuntu-20.04'}
        steps:
          - checkout: self
            submodules: true
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.8'
            displayName: 'Use Python 3.8'

          - script: |
              python -m pip install --upgrade pip
              python -m pip install numpy cython
              python -m pip install cibuildwheel
            displayName: 'Install dependencies'

          - script: cibuildwheel ./imagecodecs_src
            displayName: "cibuildwheel"

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: wheelhouse
              artifactName: wheels
  - stage: BuildDocker
    dependsOn: [GetLibsSrc]
    jobs:
      - job: linux_build_docker
#        condition: startsWith(variables['Build.SourceBranch'], 'master')
        pool: {vmImage: 'Ubuntu-20.04'}
        continueOnError: true
        timeoutInMinutes: 180
        variables:
          CIBW_BUILD: cp37*
          CIBW_TEST_REQUIRES: "-r requirements_test.txt"
          CIBW_BEFORE_TEST: "pip install scikit_build; pip install cmake"
        steps:
          - checkout: self
            submodules: true
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.8'
            displayName: 'Use Python 3.8'

          - bash: bash build_utils/docker_64.sh
            displayName: "Docker x86_64 image build"

          - bash: bash build_utils/docker_i686.sh
            displayName: "Docker i686 image build"

          - script: |
              python -m pip install --upgrade pip
              python -m pip install numpy cython
              python -m pip install cibuildwheel
            displayName: 'Install dependencies'

          - script: cibuildwheel imagecodecs_src
            displayName: "cibuildwheel"
  - stage: MacosBuild
    dependsOn: [GetLibsSrc]
    jobs:
      - job: test_build
        pool: {vmImage: "macos-10.15"}
        timeoutInMinutes: 100
        variables:
          LIBRARY_PATH: $(LD_LIBRARY_PATH)
          LD_RUNPATH_SEARCH_PATH: $(LD_LIBRARY_PATH)
          DYLD_FALLBACK_LIBRARY_PATH: $(LD_LIBRARY_PATH)
          CIBUILDWHEEL: 1
          CC: clang
          CXX: clang++
        steps:
          - checkout: self
            submodules: true
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.8'
            displayName: 'Use Python 3.8'

          - bash: brew install pcre openssl nasm automake libtool snappy ninja meson cmake
            displayName: "install build tools"

          - bash: bash build_utils/build_libomp.sh
            displayName: "build and install libomp"

          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: LibsSrc_tar
              path: $(Build.SourcesDirectory)

          - bash: tar -xf libraries.tgz
            displayName: "Unpack"

          - bash: |
              bash build_utils/build_libraries.sh
            displayName: "build libraries"

          - bash: bash build_utils/fix_macos_lib.sh
            displayName: "Fix libraries load path"

          # - bash: otool -l build_utils/libs_build/lib/libzfp.0.5.5.dylib

          # - bash: tar -czf build_utils.tar.gz build_utils/

#          - task: PublishBuildArtifacts@1
#            inputs:
#              pathToPublish: build_utils.tar.gz
#              artifactName: build_utils

          - bash: ls build_utils/libs_build/lib/*
            displayName: "show install result"

          - script: |
              python -m pip install --upgrade pip
              python -m pip install numpy cython wheel
              python -m pip install cibuildwheel
            displayName: 'Install dependencies'

          - bash: cd ./imagecodecs_src && git apply ../imagecodecs.patch && cd ..
            displayName: "patch imagecodecs"

          - bash: pip install -e ./imagecodecs_src
            displayName: "Install project"

#          - bash: tar -czf imagecodecs_src.tar.gz imagecodecs_src/
#
#          - task: PublishBuildArtifacts@1
#            inputs:
#              pathToPublish: imagecodecs_src.tar.gz
#              artifactName: build_utils

          - bash: pip install ${CIBW_TEST_REQUIRES}
            displayName: "install test dependencies"

          - script: pytest imagecodecs_src/tests
            displayName: "run test"

      - job: macos_wheel
        pool: {vmImage: "macos-10.15"}
        timeoutInMinutes: 150
        variables:
          LIBRARY_PATH: $(LD_LIBRARY_PATH)
          LD_RUNPATH_SEARCH_PATH: $(LD_LIBRARY_PATH)
          DYLD_FALLBACK_LIBRARY_PATH: $(LD_LIBRARY_PATH)
          MACOSX_DEPLOYMENT_TARGET: "10.9"
          CC: clang
          CXX: clang++
          CIBW_TEST_COMMAND: "python -m pytest {project}/imagecodecs_src/tests/ || true"
        steps:
          - checkout: self
            submodules: true
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.8'
            displayName: 'Use Python 3.8'

          - bash: brew install pcre openssl nasm automake libtool pkg-config snappy ninja meson cmake
            displayName: "install build tools"

          - bash: bash build_utils/build_libomp.sh
            displayName: "build and install libomp"

          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: LibsSrc_tar
              path: $(Build.SourcesDirectory)

          - bash: tar -xf libraries.tgz
            displayName: "Unpack"

          - bash: |
              bash build_utils/build_libraries.sh
            displayName: "build libraries"

          - bash: bash build_utils/fix_macos_lib.sh
            displayName: "Fix libraries load path"

          - bash: otool -l build_utils/libs_build/lib/libzfp.0.5.5.dylib

          - script: |
              python -m pip install --upgrade pip
              python -m pip install numpy cython
              python -m pip install cibuildwheel
            displayName: 'Install dependencies'

          - bash: cd ./imagecodecs_src && git apply ../imagecodecs.patch && cd ..
            displayName: "patch imagecodecs"

          - script: cibuildwheel ./imagecodecs_src
            displayName: "cibuildwheel"

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: wheelhouse
              artifactName: wheels

          - bash: brew install openblas
            displayName: "install numpy dependency for pypy"

          - script: OPENBLAS="$(brew --prefix openblas)" CIBW_BUILD="pp37*" CIBW_TEST_COMMAND="python -m pytest {project}/imagecodecs_src/tests/ || true" cibuildwheel ./imagecodecs_src
            displayName: "cibuildwheel"

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: wheelhouse
              artifactName: wheels
